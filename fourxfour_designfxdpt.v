// -------------------------------------------------------------
// 
// File Name: /home/yangli18/Documents/yangzai/PFC/qr_simulink/HDL/qr10/fourxfour_designfxdpt_givens/fourxfour_designfxdpt.v
// Created: 2019-10-01 15:17:02
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-09
// Target subsystem base rate: 5e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// R_11_r                        ce_out        1e-08
// R_11_i                        ce_out        1e-08
// R_12_r                        ce_out        1e-08
// R_12_i                        ce_out        1e-08
// R_13_r                        ce_out        1e-08
// R_13_i                        ce_out        1e-08
// R_14_r                        ce_out        1e-08
// R_14_i                        ce_out        1e-08
// R_22_r                        ce_out        1e-08
// R_22_i                        ce_out        1e-08
// R_23_r                        ce_out        1e-08
// R_23_i                        ce_out        1e-08
// R_24_r                        ce_out        1e-08
// R_24_i                        ce_out        1e-08
// R_33_r                        ce_out        1e-08
// R_33_i                        ce_out        1e-08
// R_34_r                        ce_out        1e-08
// R_34_i                        ce_out        1e-08
// R_44_r                        ce_out        1e-08
// R_44_i                        ce_out        1e-08
// boutr_1                       ce_out        1e-08
// bouti_1                       ce_out        1e-08
// boutr_2                       ce_out        1e-08
// bouti_2                       ce_out        1e-08
// boutr_3                       ce_out        1e-08
// bouti_3                       ce_out        1e-08
// boutr_4                       ce_out        1e-08
// bouti_4                       ce_out        1e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: fourxfour_designfxdpt
// Source Path: fourxfour_designfxdpt_givens/fourxfour_designfxdpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module fourxfour_designfxdpt
          (clk,
           reset,
           clock_en,
           A1_r,
           A1_i,
           en_in11,
           A2_r,
           A2_i,
           A3_r,
           A3_i,
           A4_r,
           A4_i,
           B_in_r,
           B_in_i,
           en_bp44,
           ce_out,
           R_11_r,
           R_11_i,
/*           R_12_r,
           R_12_i,
           R_13_r,
           R_13_i,
           R_14_r,
           R_14_i,*/
           R_22_r,
           R_22_i,
/*           R_23_r,
           R_23_i,
           R_24_r,
           R_24_i,*/
           R_33_r,
           R_33_i,
/*           R_34_r,
           R_34_i,*/
           R_44_r,
           R_44_i
/*           boutr_1,
           bouti_1,
           boutr_2,
           bouti_2,
           boutr_3,
           bouti_3,
           boutr_4,
           bouti_4*/);


  input   clk;
  input   reset;
  input   clock_en;
  input   signed [23:0] A1_r;  // sfix24_En14
  input   signed [23:0] A1_i;  // sfix24_En14
  input   en_in11;
  input   signed [23:0] A2_r;  // sfix24_En14
  input   signed [23:0] A2_i;  // sfix24_En14
  input   signed [23:0] A3_r;  // sfix24_En14
  input   signed [23:0] A3_i;  // sfix24_En14
  input   signed [23:0] A4_r;  // sfix24_En14
  input   signed [23:0] A4_i;  // sfix24_En14
  input   signed [23:0] B_in_r;  // sfix24_En14
  input   signed [23:0] B_in_i;  // sfix24_En14
  input   en_bp44;
  output  ce_out;
  output  signed [23:0] R_11_r;  // sfix24_En14
  output  signed [23:0] R_11_i;  // sfix24_En14
  wire  signed [23:0] R_12_r;  // sfix24_En14
  wire  signed [23:0] R_12_i;  // sfix24_En14
  wire  signed [23:0] R_13_r;  // sfix24_En14
  wire  signed [23:0] R_13_i;  // sfix24_En14
  wire  signed [23:0] R_14_r;  // sfix24_En14
  wire  signed [23:0] R_14_i;  // sfix24_En14
  output  signed [23:0] R_22_r;  // sfix24_En14
  output  signed [23:0] R_22_i;  // sfix24_En14
  wire  signed [23:0] R_23_r;  // sfix24_En14
  wire  signed [23:0] R_23_i;  // sfix24_En14
  wire  signed [23:0] R_24_r;  // sfix24_En14
  wire  signed [23:0] R_24_i;  // sfix24_En14
  output  signed [23:0] R_33_r;  // sfix24_En14
  output  signed [23:0] R_33_i;  // sfix24_En14
  wire  signed [23:0] R_34_r;  // sfix24_En14
  wire  signed [23:0] R_34_i;  // sfix24_En14
  output  signed [23:0] R_44_r;  // sfix24_En14
  output  signed [23:0] R_44_i;  // sfix24_En14
  wire  signed [23:0] boutr_1;  // sfix24_En14
  wire  signed [23:0] bouti_1;  // sfix24_En14
  wire  signed [23:0] boutr_2;  // sfix24_En14
  wire  signed [23:0] bouti_2;  // sfix24_En14
  wire  signed [23:0] boutr_3;  // sfix24_En14
  wire  signed [23:0] bouti_3;  // sfix24_En14
  wire  signed [23:0] boutr_4;  // sfix24_En14
  wire  signed [23:0] bouti_4;  // sfix24_En14


  wire enb;
  wire enb_2_1_0;
  wire enb_1_1_1;
  reg  [0:4] Delay98_reg;  // ufix1 [5]
  wire [0:4] Delay98_reg_next;  // ufix1 [5]
  wire Delay98_out1;
  reg  Delay101_out1;
  reg  Delay104_out1;
  reg  Delay105_out1;
  reg  [0:4] Delay106_reg;  // ufix1 [5]
  wire [0:4] Delay106_reg_next;  // ufix1 [5]
  wire Delay106_out1;
  reg  Delay107_out1;
  reg signed [23:0] Delay17_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay17_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay17_out1;  // sfix24_En14
  reg signed [23:0] Delay18_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay18_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay18_out1;  // sfix24_En14
  reg signed [23:0] Delay19_reg [0:5];  // sfix24 [6]
  wire signed [23:0] Delay19_reg_next [0:5];  // sfix24_En14 [6]
  wire signed [23:0] Delay19_out1;  // sfix24_En14
  reg signed [23:0] Delay20_reg [0:5];  // sfix24 [6]
  wire signed [23:0] Delay20_reg_next [0:5];  // sfix24_En14 [6]
  wire signed [23:0] Delay20_out1;  // sfix24_En14
  reg signed [23:0] Delay21_reg [0:6];  // sfix24 [7]
  wire signed [23:0] Delay21_reg_next [0:6];  // sfix24_En14 [7]
  wire signed [23:0] Delay21_out1;  // sfix24_En14
  reg signed [23:0] Delay22_reg [0:6];  // sfix24 [7]
  wire signed [23:0] Delay22_reg_next [0:6];  // sfix24_En14 [7]
  wire signed [23:0] Delay22_out1;  // sfix24_En14
  reg signed [23:0] Delay23_reg [0:7];  // sfix24 [8]
  wire signed [23:0] Delay23_reg_next [0:7];  // sfix24_En14 [8]
  wire signed [23:0] Delay23_out1;  // sfix24_En14
  reg signed [23:0] Delay24_reg [0:7];  // sfix24 [8]
  wire signed [23:0] Delay24_reg_next [0:7];  // sfix24_En14 [8]
  wire signed [23:0] Delay24_out1;  // sfix24_En14
  reg  Delay11_out1;
  reg  Delay12_out1;
  reg  Delay13_out1;
  reg  Delay35_out1;
  reg  [0:4] Delay102_reg;  // ufix1 [5]
  wire [0:4] Delay102_reg_next;  // ufix1 [5]
  wire Delay102_out1;
  reg  Delay103_out1;
  reg  Delay4_out1;
  reg  Delay99_out1;
  reg  [0:1] Delay67_reg;  // ufix1 [2]
  wire [0:1] Delay67_reg_next;  // ufix1 [2]
  wire Delay67_out1;
  reg  [0:1] Delay36_reg;  // ufix1 [2]
  wire [0:1] Delay36_reg_next;  // ufix1 [2]
  wire Delay36_out1;
  reg  [0:1] Delay46_reg;  // ufix1 [2]
  wire [0:1] Delay46_reg_next;  // ufix1 [2]
  wire Delay46_out1;
  reg  Delay81_out1;
  reg  [0:1] Delay72_reg;  // ufix1 [2]
  wire [0:1] Delay72_reg_next;  // ufix1 [2]
  wire Delay72_out1;
  reg  Delay108_out1;
  wire signed [23:0] Givens_Internal_QR_Cell_out7;  // sfix24_En14
  reg signed [23:0] Delay29_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell1_out5;  // sfix24_En14
  reg signed [23:0] Delay96_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell1_out4;  // sfix24_En14
  reg signed [23:0] Delay97_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out7;  // sfix24_En14
  reg signed [23:0] Delay27_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay27_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay27_out1;  // sfix24_En14
  reg signed [23:0] Delay91_out1;  // sfix24_En14
  reg signed [23:0] Delay92_out1;  // sfix24_En14
  reg signed [23:0] Delay90_out1;  // sfix24_En14
  reg signed [23:0] Delay93_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out7;  // sfix24_En14
  reg signed [23:0] Delay95_out1;  // sfix24_En14
  reg signed [23:0] Delay87_out1;  // sfix24_En14
  reg signed [23:0] Delay89_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out6;  // sfix24_En14
  reg signed [23:0] Delay82_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell3_out3;  // sfix24_En14
  reg signed [23:0] Delay78_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell3_out2;  // sfix24_En14
  reg signed [23:0] Delay77_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell3_out1;  // sfix24_En14
  reg signed [23:0] Delay76_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out2;  // sfix24_En14
  reg signed [23:0] Delay80_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay80_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay80_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out1;  // sfix24_En14
  reg signed [23:0] Delay79_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay79_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay79_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out2;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out3;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out4;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out5;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell3_out7;  // sfix24_En14
  reg signed [23:0] Delay83_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out2;  // sfix24_En14
  reg signed [23:0] Delay75_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out6;  // sfix24_En14
  reg signed [23:0] Delay47_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay47_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay47_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out5;  // sfix24_En14
  reg signed [23:0] Delay66_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out4;  // sfix24_En14
  reg signed [23:0] Delay65_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out3;  // sfix24_En14
  reg signed [23:0] Delay64_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out2;  // sfix24_En14
  reg signed [23:0] Delay37_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay37_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay37_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out1;  // sfix24_En14
  reg signed [23:0] Delay45_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay45_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay45_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out3;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out4;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out5;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell2_out7;  // sfix24_En14
  reg signed [23:0] Delay55_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay55_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay55_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell2_out3;  // sfix24_En14
  reg signed [23:0] Delay44_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell2_out2;  // sfix24_En14
  reg signed [23:0] Delay62_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell2_out1;  // sfix24_En14
  reg signed [23:0] Delay69_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out2;  // sfix24_En14
  reg signed [23:0] Delay71_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay71_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay71_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell3_out5;  // sfix24_En14
  reg signed [23:0] Delay85_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out6;  // sfix24_En14
  reg signed [23:0] Delay48_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out5;  // sfix24_En14
  reg signed [23:0] Delay32_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out4;  // sfix24_En14
  reg signed [23:0] Delay60_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out3;  // sfix24_En14
  reg signed [23:0] Delay59_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out2;  // sfix24_En14
  reg signed [23:0] Delay68_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay68_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay68_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out1;  // sfix24_En14
  reg signed [23:0] Delay73_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay73_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay73_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out3;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out4;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out5;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell1_out7;  // sfix24_En14
  reg signed [23:0] Delay49_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out5;  // sfix24_En14
  reg signed [23:0] Delay58_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out4;  // sfix24_En14
  reg signed [23:0] Delay57_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell2_out5;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out7;  // sfix24_En14
  reg signed [23:0] Delay61_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out6;  // sfix24_En14
  reg signed [23:0] Delay63_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out2;  // sfix24_En14
  reg signed [23:0] Delay38_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out1;  // sfix24_En14
  reg signed [23:0] Delay34_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell2_out4;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out7;  // sfix24_En14
  reg signed [23:0] Delay50_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay50_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay50_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out6;  // sfix24_En14
  reg signed [23:0] Delay51_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay51_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay51_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell1_out3;  // sfix24_En14
  reg signed [23:0] Delay42_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell1_out2;  // sfix24_En14
  reg signed [23:0] Delay53_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out7;  // sfix24_En14
  reg signed [23:0] Delay52_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out6;  // sfix24_En14
  reg signed [23:0] Delay54_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out2;  // sfix24_En14
  reg signed [23:0] Delay100_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out1;  // sfix24_En14
  reg signed [23:0] Delay33_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell1_out1;  // sfix24_En14
  reg signed [23:0] Delay31_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out2;  // sfix24_En14
  reg signed [23:0] Delay40_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay40_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay40_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out1;  // sfix24_En14
  reg signed [23:0] Delay39_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay39_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay39_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell3_out3;  // sfix24_En14
  reg signed [23:0] Delay56_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out2;  // sfix24_En14
  reg signed [23:0] Delay43_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay43_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay43_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out1;  // sfix24_En14
  reg signed [23:0] Delay41_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay41_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay41_out1;  // sfix24_En14
  reg signed [23:0] Delay86_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell4_out1;  // sfix24_En14
  reg signed [23:0] Delay70_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay70_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay70_out1;  // sfix24_En14
  reg signed [23:0] Delay84_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell5_out1;  // sfix24_En14
  reg signed [23:0] Delay74_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell3_out4;  // sfix24_En14
  reg signed [23:0] Delay88_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out6;  // sfix24_En14
  reg signed [23:0] Delay25_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out5;  // sfix24_En14
  reg signed [23:0] Delay16_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out4;  // sfix24_En14
  reg signed [23:0] Delay15_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out3;  // sfix24_En14
  reg signed [23:0] Delay14_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out3;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out4;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out5;  // sfix24_En14
  wire signed [23:0] Givens_Internal_BW_Cell_out7;  // sfix24_En14
  reg signed [23:0] Delay26_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out5;  // sfix24_En14
  reg signed [23:0] Delay10_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out4;  // sfix24_En14
  reg signed [23:0] Delay9_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out3;  // sfix24_En14
  reg signed [23:0] Delay8_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell2_out6;  // sfix24_En14
  reg signed [23:0] Delay94_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out5;  // sfix24_En14
  reg signed [23:0] Delay7_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out4;  // sfix24_En14
  reg signed [23:0] Delay6_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out3;  // sfix24_En14
  reg signed [23:0] Delay5_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell1_out6;  // sfix24_En14
  reg signed [23:0] Delay28_reg [0:4];  // sfix24 [5]
  wire signed [23:0] Delay28_reg_next [0:4];  // sfix24_En14 [5]
  wire signed [23:0] Delay28_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell_out3;  // sfix24_En14
  reg signed [23:0] Delay2_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell_out2;  // sfix24_En14
  reg signed [23:0] Delay3_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell_out1;  // sfix24_En14
  reg signed [23:0] Delay1_out1;  // sfix24_En14
  wire signed [23:0] Givens_Internal_QR_Cell_out6;  // sfix24_En14
  reg signed [23:0] Delay30_out1;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell_out4;  // sfix24_En14
  wire signed [23:0] Givens_Boundary_Cell_out5;  // sfix24_En14

  // Move Input pipeline delays into subsystem
  // Givens_Internal_QR_Cell and
  // Givens_Boundary_Cell


  fourxfour_designfxdpt_tc u_fourxfour_designfxdpt_tc (.clk(clk),
                                                       .reset(reset),
                                                       .clock_en(clock_en),
                                                       .enb_2_1_0(enb_2_1_0),
                                                       .enb(enb),
                                                       .enb_1_1_1(enb_1_1_1)
                                                       );

  always @(posedge clk)
    begin : Delay98_process
      if (reset == 1'b1) begin
        Delay98_reg[0] <= 1'b0;
        Delay98_reg[1] <= 1'b0;
        Delay98_reg[2] <= 1'b0;
        Delay98_reg[3] <= 1'b0;
        Delay98_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay98_reg[0] <= Delay98_reg_next[0];
          Delay98_reg[1] <= Delay98_reg_next[1];
          Delay98_reg[2] <= Delay98_reg_next[2];
          Delay98_reg[3] <= Delay98_reg_next[3];
          Delay98_reg[4] <= Delay98_reg_next[4];
        end
      end
    end

  assign Delay98_out1 = Delay98_reg[4];
  assign Delay98_reg_next[0] = en_bp44;
  assign Delay98_reg_next[1] = Delay98_reg[0];
  assign Delay98_reg_next[2] = Delay98_reg[1];
  assign Delay98_reg_next[3] = Delay98_reg[2];
  assign Delay98_reg_next[4] = Delay98_reg[3];



  always @(posedge clk)
    begin : Delay101_process
      if (reset == 1'b1) begin
        Delay101_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay101_out1 <= Delay98_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay104_process
      if (reset == 1'b1) begin
        Delay104_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay104_out1 <= Delay101_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay105_process
      if (reset == 1'b1) begin
        Delay105_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay105_out1 <= Delay104_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay106_process
      if (reset == 1'b1) begin
        Delay106_reg[0] <= 1'b0;
        Delay106_reg[1] <= 1'b0;
        Delay106_reg[2] <= 1'b0;
        Delay106_reg[3] <= 1'b0;
        Delay106_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay106_reg[0] <= Delay106_reg_next[0];
          Delay106_reg[1] <= Delay106_reg_next[1];
          Delay106_reg[2] <= Delay106_reg_next[2];
          Delay106_reg[3] <= Delay106_reg_next[3];
          Delay106_reg[4] <= Delay106_reg_next[4];
        end
      end
    end

  assign Delay106_out1 = Delay106_reg[4];
  assign Delay106_reg_next[0] = Delay105_out1;
  assign Delay106_reg_next[1] = Delay106_reg[0];
  assign Delay106_reg_next[2] = Delay106_reg[1];
  assign Delay106_reg_next[3] = Delay106_reg[2];
  assign Delay106_reg_next[4] = Delay106_reg[3];



  always @(posedge clk)
    begin : Delay107_process
      if (reset == 1'b1) begin
        Delay107_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay107_out1 <= Delay106_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_reg[0] <= 24'sb000000000000000000000000;
        Delay17_reg[1] <= 24'sb000000000000000000000000;
        Delay17_reg[2] <= 24'sb000000000000000000000000;
        Delay17_reg[3] <= 24'sb000000000000000000000000;
        Delay17_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= Delay17_reg_next[0];
          Delay17_reg[1] <= Delay17_reg_next[1];
          Delay17_reg[2] <= Delay17_reg_next[2];
          Delay17_reg[3] <= Delay17_reg_next[3];
          Delay17_reg[4] <= Delay17_reg_next[4];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[4];
  assign Delay17_reg_next[0] = A2_r;
  assign Delay17_reg_next[1] = Delay17_reg[0];
  assign Delay17_reg_next[2] = Delay17_reg[1];
  assign Delay17_reg_next[3] = Delay17_reg[2];
  assign Delay17_reg_next[4] = Delay17_reg[3];



  always @(posedge clk)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_reg[0] <= 24'sb000000000000000000000000;
        Delay18_reg[1] <= 24'sb000000000000000000000000;
        Delay18_reg[2] <= 24'sb000000000000000000000000;
        Delay18_reg[3] <= 24'sb000000000000000000000000;
        Delay18_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay18_reg[0] <= Delay18_reg_next[0];
          Delay18_reg[1] <= Delay18_reg_next[1];
          Delay18_reg[2] <= Delay18_reg_next[2];
          Delay18_reg[3] <= Delay18_reg_next[3];
          Delay18_reg[4] <= Delay18_reg_next[4];
        end
      end
    end

  assign Delay18_out1 = Delay18_reg[4];
  assign Delay18_reg_next[0] = A2_i;
  assign Delay18_reg_next[1] = Delay18_reg[0];
  assign Delay18_reg_next[2] = Delay18_reg[1];
  assign Delay18_reg_next[3] = Delay18_reg[2];
  assign Delay18_reg_next[4] = Delay18_reg[3];



  always @(posedge clk)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_reg[0] <= 24'sb000000000000000000000000;
        Delay19_reg[1] <= 24'sb000000000000000000000000;
        Delay19_reg[2] <= 24'sb000000000000000000000000;
        Delay19_reg[3] <= 24'sb000000000000000000000000;
        Delay19_reg[4] <= 24'sb000000000000000000000000;
        Delay19_reg[5] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay19_reg[0] <= Delay19_reg_next[0];
          Delay19_reg[1] <= Delay19_reg_next[1];
          Delay19_reg[2] <= Delay19_reg_next[2];
          Delay19_reg[3] <= Delay19_reg_next[3];
          Delay19_reg[4] <= Delay19_reg_next[4];
          Delay19_reg[5] <= Delay19_reg_next[5];
        end
      end
    end

  assign Delay19_out1 = Delay19_reg[5];
  assign Delay19_reg_next[0] = A3_r;
  assign Delay19_reg_next[1] = Delay19_reg[0];
  assign Delay19_reg_next[2] = Delay19_reg[1];
  assign Delay19_reg_next[3] = Delay19_reg[2];
  assign Delay19_reg_next[4] = Delay19_reg[3];
  assign Delay19_reg_next[5] = Delay19_reg[4];



  always @(posedge clk)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_reg[0] <= 24'sb000000000000000000000000;
        Delay20_reg[1] <= 24'sb000000000000000000000000;
        Delay20_reg[2] <= 24'sb000000000000000000000000;
        Delay20_reg[3] <= 24'sb000000000000000000000000;
        Delay20_reg[4] <= 24'sb000000000000000000000000;
        Delay20_reg[5] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay20_reg[0] <= Delay20_reg_next[0];
          Delay20_reg[1] <= Delay20_reg_next[1];
          Delay20_reg[2] <= Delay20_reg_next[2];
          Delay20_reg[3] <= Delay20_reg_next[3];
          Delay20_reg[4] <= Delay20_reg_next[4];
          Delay20_reg[5] <= Delay20_reg_next[5];
        end
      end
    end

  assign Delay20_out1 = Delay20_reg[5];
  assign Delay20_reg_next[0] = A3_i;
  assign Delay20_reg_next[1] = Delay20_reg[0];
  assign Delay20_reg_next[2] = Delay20_reg[1];
  assign Delay20_reg_next[3] = Delay20_reg[2];
  assign Delay20_reg_next[4] = Delay20_reg[3];
  assign Delay20_reg_next[5] = Delay20_reg[4];



  always @(posedge clk)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_reg[0] <= 24'sb000000000000000000000000;
        Delay21_reg[1] <= 24'sb000000000000000000000000;
        Delay21_reg[2] <= 24'sb000000000000000000000000;
        Delay21_reg[3] <= 24'sb000000000000000000000000;
        Delay21_reg[4] <= 24'sb000000000000000000000000;
        Delay21_reg[5] <= 24'sb000000000000000000000000;
        Delay21_reg[6] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_reg[0] <= Delay21_reg_next[0];
          Delay21_reg[1] <= Delay21_reg_next[1];
          Delay21_reg[2] <= Delay21_reg_next[2];
          Delay21_reg[3] <= Delay21_reg_next[3];
          Delay21_reg[4] <= Delay21_reg_next[4];
          Delay21_reg[5] <= Delay21_reg_next[5];
          Delay21_reg[6] <= Delay21_reg_next[6];
        end
      end
    end

  assign Delay21_out1 = Delay21_reg[6];
  assign Delay21_reg_next[0] = A4_r;
  assign Delay21_reg_next[1] = Delay21_reg[0];
  assign Delay21_reg_next[2] = Delay21_reg[1];
  assign Delay21_reg_next[3] = Delay21_reg[2];
  assign Delay21_reg_next[4] = Delay21_reg[3];
  assign Delay21_reg_next[5] = Delay21_reg[4];
  assign Delay21_reg_next[6] = Delay21_reg[5];



  always @(posedge clk)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_reg[0] <= 24'sb000000000000000000000000;
        Delay22_reg[1] <= 24'sb000000000000000000000000;
        Delay22_reg[2] <= 24'sb000000000000000000000000;
        Delay22_reg[3] <= 24'sb000000000000000000000000;
        Delay22_reg[4] <= 24'sb000000000000000000000000;
        Delay22_reg[5] <= 24'sb000000000000000000000000;
        Delay22_reg[6] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_reg[0] <= Delay22_reg_next[0];
          Delay22_reg[1] <= Delay22_reg_next[1];
          Delay22_reg[2] <= Delay22_reg_next[2];
          Delay22_reg[3] <= Delay22_reg_next[3];
          Delay22_reg[4] <= Delay22_reg_next[4];
          Delay22_reg[5] <= Delay22_reg_next[5];
          Delay22_reg[6] <= Delay22_reg_next[6];
        end
      end
    end

  assign Delay22_out1 = Delay22_reg[6];
  assign Delay22_reg_next[0] = A4_i;
  assign Delay22_reg_next[1] = Delay22_reg[0];
  assign Delay22_reg_next[2] = Delay22_reg[1];
  assign Delay22_reg_next[3] = Delay22_reg[2];
  assign Delay22_reg_next[4] = Delay22_reg[3];
  assign Delay22_reg_next[5] = Delay22_reg[4];
  assign Delay22_reg_next[6] = Delay22_reg[5];



  always @(posedge clk)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_reg[0] <= 24'sb000000000000000000000000;
        Delay23_reg[1] <= 24'sb000000000000000000000000;
        Delay23_reg[2] <= 24'sb000000000000000000000000;
        Delay23_reg[3] <= 24'sb000000000000000000000000;
        Delay23_reg[4] <= 24'sb000000000000000000000000;
        Delay23_reg[5] <= 24'sb000000000000000000000000;
        Delay23_reg[6] <= 24'sb000000000000000000000000;
        Delay23_reg[7] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_reg[0] <= Delay23_reg_next[0];
          Delay23_reg[1] <= Delay23_reg_next[1];
          Delay23_reg[2] <= Delay23_reg_next[2];
          Delay23_reg[3] <= Delay23_reg_next[3];
          Delay23_reg[4] <= Delay23_reg_next[4];
          Delay23_reg[5] <= Delay23_reg_next[5];
          Delay23_reg[6] <= Delay23_reg_next[6];
          Delay23_reg[7] <= Delay23_reg_next[7];
        end
      end
    end

  assign Delay23_out1 = Delay23_reg[7];
  assign Delay23_reg_next[0] = B_in_r;
  assign Delay23_reg_next[1] = Delay23_reg[0];
  assign Delay23_reg_next[2] = Delay23_reg[1];
  assign Delay23_reg_next[3] = Delay23_reg[2];
  assign Delay23_reg_next[4] = Delay23_reg[3];
  assign Delay23_reg_next[5] = Delay23_reg[4];
  assign Delay23_reg_next[6] = Delay23_reg[5];
  assign Delay23_reg_next[7] = Delay23_reg[6];



  always @(posedge clk)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_reg[0] <= 24'sb000000000000000000000000;
        Delay24_reg[1] <= 24'sb000000000000000000000000;
        Delay24_reg[2] <= 24'sb000000000000000000000000;
        Delay24_reg[3] <= 24'sb000000000000000000000000;
        Delay24_reg[4] <= 24'sb000000000000000000000000;
        Delay24_reg[5] <= 24'sb000000000000000000000000;
        Delay24_reg[6] <= 24'sb000000000000000000000000;
        Delay24_reg[7] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay24_reg[0] <= Delay24_reg_next[0];
          Delay24_reg[1] <= Delay24_reg_next[1];
          Delay24_reg[2] <= Delay24_reg_next[2];
          Delay24_reg[3] <= Delay24_reg_next[3];
          Delay24_reg[4] <= Delay24_reg_next[4];
          Delay24_reg[5] <= Delay24_reg_next[5];
          Delay24_reg[6] <= Delay24_reg_next[6];
          Delay24_reg[7] <= Delay24_reg_next[7];
        end
      end
    end

  assign Delay24_out1 = Delay24_reg[7];
  assign Delay24_reg_next[0] = B_in_i;
  assign Delay24_reg_next[1] = Delay24_reg[0];
  assign Delay24_reg_next[2] = Delay24_reg[1];
  assign Delay24_reg_next[3] = Delay24_reg[2];
  assign Delay24_reg_next[4] = Delay24_reg[3];
  assign Delay24_reg_next[5] = Delay24_reg[4];
  assign Delay24_reg_next[6] = Delay24_reg[5];
  assign Delay24_reg_next[7] = Delay24_reg[6];



  always @(posedge clk)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= en_in11;
        end
      end
    end



  always @(posedge clk)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Delay11_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= Delay12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay35_process
      if (reset == 1'b1) begin
        Delay35_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay35_out1 <= Delay13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay102_process
      if (reset == 1'b1) begin
        Delay102_reg[0] <= 1'b0;
        Delay102_reg[1] <= 1'b0;
        Delay102_reg[2] <= 1'b0;
        Delay102_reg[3] <= 1'b0;
        Delay102_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay102_reg[0] <= Delay102_reg_next[0];
          Delay102_reg[1] <= Delay102_reg_next[1];
          Delay102_reg[2] <= Delay102_reg_next[2];
          Delay102_reg[3] <= Delay102_reg_next[3];
          Delay102_reg[4] <= Delay102_reg_next[4];
        end
      end
    end

  assign Delay102_out1 = Delay102_reg[4];
  assign Delay102_reg_next[0] = Delay101_out1;
  assign Delay102_reg_next[1] = Delay102_reg[0];
  assign Delay102_reg_next[2] = Delay102_reg[1];
  assign Delay102_reg_next[3] = Delay102_reg[2];
  assign Delay102_reg_next[4] = Delay102_reg[3];



  always @(posedge clk)
    begin : Delay103_process
      if (reset == 1'b1) begin
        Delay103_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay103_out1 <= Delay102_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay99_process
      if (reset == 1'b1) begin
        Delay99_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay99_out1 <= Delay98_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay67_process
      if (reset == 1'b1) begin
        Delay67_reg[0] <= 1'b0;
        Delay67_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay67_reg[0] <= Delay67_reg_next[0];
          Delay67_reg[1] <= Delay67_reg_next[1];
        end
      end
    end

  assign Delay67_out1 = Delay67_reg[1];
  assign Delay67_reg_next[0] = Delay35_out1;
  assign Delay67_reg_next[1] = Delay67_reg[0];



  always @(posedge clk)
    begin : Delay36_process
      if (reset == 1'b1) begin
        Delay36_reg[0] <= 1'b0;
        Delay36_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay36_reg[0] <= Delay36_reg_next[0];
          Delay36_reg[1] <= Delay36_reg_next[1];
        end
      end
    end

  assign Delay36_out1 = Delay36_reg[1];
  assign Delay36_reg_next[0] = Delay35_out1;
  assign Delay36_reg_next[1] = Delay36_reg[0];



  always @(posedge clk)
    begin : Delay46_process
      if (reset == 1'b1) begin
        Delay46_reg[0] <= 1'b0;
        Delay46_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay46_reg[0] <= Delay46_reg_next[0];
          Delay46_reg[1] <= Delay46_reg_next[1];
        end
      end
    end

  assign Delay46_out1 = Delay46_reg[1];
  assign Delay46_reg_next[0] = Delay36_out1;
  assign Delay46_reg_next[1] = Delay46_reg[0];



  always @(posedge clk)
    begin : Delay81_process
      if (reset == 1'b1) begin
        Delay81_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay81_out1 <= Delay35_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay72_process
      if (reset == 1'b1) begin
        Delay72_reg[0] <= 1'b0;
        Delay72_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay72_reg[0] <= Delay72_reg_next[0];
          Delay72_reg[1] <= Delay72_reg_next[1];
        end
      end
    end

  assign Delay72_out1 = Delay72_reg[1];
  assign Delay72_reg_next[0] = Delay46_out1;
  assign Delay72_reg_next[1] = Delay72_reg[0];



  always @(posedge clk)
    begin : Delay108_process
      if (reset == 1'b1) begin
        Delay108_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay108_out1 <= Delay81_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= Givens_Internal_QR_Cell_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay96_process
      if (reset == 1'b1) begin
        Delay96_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay96_out1 <= Givens_Boundary_Cell1_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay97_process
      if (reset == 1'b1) begin
        Delay97_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay97_out1 <= Givens_Boundary_Cell1_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_reg[0] <= 24'sb000000000000000000000000;
        Delay27_reg[1] <= 24'sb000000000000000000000000;
        Delay27_reg[2] <= 24'sb000000000000000000000000;
        Delay27_reg[3] <= 24'sb000000000000000000000000;
        Delay27_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay27_reg[0] <= Delay27_reg_next[0];
          Delay27_reg[1] <= Delay27_reg_next[1];
          Delay27_reg[2] <= Delay27_reg_next[2];
          Delay27_reg[3] <= Delay27_reg_next[3];
          Delay27_reg[4] <= Delay27_reg_next[4];
        end
      end
    end

  assign Delay27_out1 = Delay27_reg[4];
  assign Delay27_reg_next[0] = Givens_Internal_QR_Cell1_out7;
  assign Delay27_reg_next[1] = Delay27_reg[0];
  assign Delay27_reg_next[2] = Delay27_reg[1];
  assign Delay27_reg_next[3] = Delay27_reg[2];
  assign Delay27_reg_next[4] = Delay27_reg[3];



  always @(posedge clk)
    begin : Delay92_process
      if (reset == 1'b1) begin
        Delay92_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay92_out1 <= Delay91_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay93_process
      if (reset == 1'b1) begin
        Delay93_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay93_out1 <= Delay90_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay95_process
      if (reset == 1'b1) begin
        Delay95_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay95_out1 <= Givens_Internal_QR_Cell2_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay89_process
      if (reset == 1'b1) begin
        Delay89_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay89_out1 <= Delay87_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay82_process
      if (reset == 1'b1) begin
        Delay82_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay82_out1 <= Givens_Internal_BW_Cell3_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay78_process
      if (reset == 1'b1) begin
        Delay78_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay78_out1 <= Givens_Boundary_Cell3_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay77_process
      if (reset == 1'b1) begin
        Delay77_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay77_out1 <= Givens_Boundary_Cell3_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay76_process
      if (reset == 1'b1) begin
        Delay76_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay76_out1 <= Givens_Boundary_Cell3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay80_process
      if (reset == 1'b1) begin
        Delay80_reg[0] <= 24'sb000000000000000000000000;
        Delay80_reg[1] <= 24'sb000000000000000000000000;
        Delay80_reg[2] <= 24'sb000000000000000000000000;
        Delay80_reg[3] <= 24'sb000000000000000000000000;
        Delay80_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay80_reg[0] <= Delay80_reg_next[0];
          Delay80_reg[1] <= Delay80_reg_next[1];
          Delay80_reg[2] <= Delay80_reg_next[2];
          Delay80_reg[3] <= Delay80_reg_next[3];
          Delay80_reg[4] <= Delay80_reg_next[4];
        end
      end
    end

  assign Delay80_out1 = Delay80_reg[4];
  assign Delay80_reg_next[0] = Givens_Internal_BW_Cell2_out2;
  assign Delay80_reg_next[1] = Delay80_reg[0];
  assign Delay80_reg_next[2] = Delay80_reg[1];
  assign Delay80_reg_next[3] = Delay80_reg[2];
  assign Delay80_reg_next[4] = Delay80_reg[3];



  always @(posedge clk)
    begin : Delay79_process
      if (reset == 1'b1) begin
        Delay79_reg[0] <= 24'sb000000000000000000000000;
        Delay79_reg[1] <= 24'sb000000000000000000000000;
        Delay79_reg[2] <= 24'sb000000000000000000000000;
        Delay79_reg[3] <= 24'sb000000000000000000000000;
        Delay79_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay79_reg[0] <= Delay79_reg_next[0];
          Delay79_reg[1] <= Delay79_reg_next[1];
          Delay79_reg[2] <= Delay79_reg_next[2];
          Delay79_reg[3] <= Delay79_reg_next[3];
          Delay79_reg[4] <= Delay79_reg_next[4];
        end
      end
    end

  assign Delay79_out1 = Delay79_reg[4];
  assign Delay79_reg_next[0] = Givens_Internal_BW_Cell2_out1;
  assign Delay79_reg_next[1] = Delay79_reg[0];
  assign Delay79_reg_next[2] = Delay79_reg[1];
  assign Delay79_reg_next[3] = Delay79_reg[2];
  assign Delay79_reg_next[4] = Delay79_reg[3];



  Givens_Internal_BW_Cell3 u_Givens_Internal_BW_Cell3 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay79_out1),  // sfix24_En14
                                                       .uin_i(Delay80_out1),  // sfix24_En14
                                                       .cin(Delay76_out1),  // sfix24_En14
                                                       .sin_r(Delay77_out1),  // sfix24_En14
                                                       .sin_i(Delay78_out1),  // sfix24_En14
                                                       .Enable(Delay72_out1),
                                                       .uout_r(Givens_Internal_BW_Cell3_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_BW_Cell3_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_BW_Cell3_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_BW_Cell3_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_BW_Cell3_out5),  // sfix24_En14
                                                       .rout_i(Givens_Internal_BW_Cell3_out6),  // sfix24_En14
                                                       .rout_r(Givens_Internal_BW_Cell3_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay83_process
      if (reset == 1'b1) begin
        Delay83_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay83_out1 <= Givens_Internal_BW_Cell3_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay75_process
      if (reset == 1'b1) begin
        Delay75_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay75_out1 <= Givens_Internal_QR_Cell5_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay47_process
      if (reset == 1'b1) begin
        Delay47_reg[0] <= 24'sb000000000000000000000000;
        Delay47_reg[1] <= 24'sb000000000000000000000000;
        Delay47_reg[2] <= 24'sb000000000000000000000000;
        Delay47_reg[3] <= 24'sb000000000000000000000000;
        Delay47_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay47_reg[0] <= Delay47_reg_next[0];
          Delay47_reg[1] <= Delay47_reg_next[1];
          Delay47_reg[2] <= Delay47_reg_next[2];
          Delay47_reg[3] <= Delay47_reg_next[3];
          Delay47_reg[4] <= Delay47_reg_next[4];
        end
      end
    end

  assign Delay47_out1 = Delay47_reg[4];
  assign Delay47_reg_next[0] = Givens_Internal_BW_Cell2_out6;
  assign Delay47_reg_next[1] = Delay47_reg[0];
  assign Delay47_reg_next[2] = Delay47_reg[1];
  assign Delay47_reg_next[3] = Delay47_reg[2];
  assign Delay47_reg_next[4] = Delay47_reg[3];



  always @(posedge clk)
    begin : Delay66_process
      if (reset == 1'b1) begin
        Delay66_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay66_out1 <= Givens_Internal_QR_Cell5_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay65_process
      if (reset == 1'b1) begin
        Delay65_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay65_out1 <= Givens_Internal_QR_Cell5_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay64_process
      if (reset == 1'b1) begin
        Delay64_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay64_out1 <= Givens_Internal_QR_Cell5_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay37_process
      if (reset == 1'b1) begin
        Delay37_reg[0] <= 24'sb000000000000000000000000;
        Delay37_reg[1] <= 24'sb000000000000000000000000;
        Delay37_reg[2] <= 24'sb000000000000000000000000;
        Delay37_reg[3] <= 24'sb000000000000000000000000;
        Delay37_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay37_reg[0] <= Delay37_reg_next[0];
          Delay37_reg[1] <= Delay37_reg_next[1];
          Delay37_reg[2] <= Delay37_reg_next[2];
          Delay37_reg[3] <= Delay37_reg_next[3];
          Delay37_reg[4] <= Delay37_reg_next[4];
        end
      end
    end

  assign Delay37_out1 = Delay37_reg[4];
  assign Delay37_reg_next[0] = Givens_Internal_BW_Cell1_out2;
  assign Delay37_reg_next[1] = Delay37_reg[0];
  assign Delay37_reg_next[2] = Delay37_reg[1];
  assign Delay37_reg_next[3] = Delay37_reg[2];
  assign Delay37_reg_next[4] = Delay37_reg[3];



  always @(posedge clk)
    begin : Delay45_process
      if (reset == 1'b1) begin
        Delay45_reg[0] <= 24'sb000000000000000000000000;
        Delay45_reg[1] <= 24'sb000000000000000000000000;
        Delay45_reg[2] <= 24'sb000000000000000000000000;
        Delay45_reg[3] <= 24'sb000000000000000000000000;
        Delay45_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay45_reg[0] <= Delay45_reg_next[0];
          Delay45_reg[1] <= Delay45_reg_next[1];
          Delay45_reg[2] <= Delay45_reg_next[2];
          Delay45_reg[3] <= Delay45_reg_next[3];
          Delay45_reg[4] <= Delay45_reg_next[4];
        end
      end
    end

  assign Delay45_out1 = Delay45_reg[4];
  assign Delay45_reg_next[0] = Givens_Internal_BW_Cell1_out1;
  assign Delay45_reg_next[1] = Delay45_reg[0];
  assign Delay45_reg_next[2] = Delay45_reg[1];
  assign Delay45_reg_next[3] = Delay45_reg[2];
  assign Delay45_reg_next[4] = Delay45_reg[3];



  Givens_Internal_BW_Cell2 u_Givens_Internal_BW_Cell2 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay45_out1),  // sfix24_En14
                                                       .uin_i(Delay37_out1),  // sfix24_En14
                                                       .cin(Delay64_out1),  // sfix24_En14
                                                       .sin_r(Delay65_out1),  // sfix24_En14
                                                       .sin_i(Delay66_out1),  // sfix24_En14
                                                       .Enable(Delay46_out1),
                                                       .uout_r(Givens_Internal_BW_Cell2_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_BW_Cell2_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_BW_Cell2_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_BW_Cell2_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_BW_Cell2_out5),  // sfix24_En14
                                                       .rout_i(Givens_Internal_BW_Cell2_out6),  // sfix24_En14
                                                       .rout_r(Givens_Internal_BW_Cell2_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay55_process
      if (reset == 1'b1) begin
        Delay55_reg[0] <= 24'sb000000000000000000000000;
        Delay55_reg[1] <= 24'sb000000000000000000000000;
        Delay55_reg[2] <= 24'sb000000000000000000000000;
        Delay55_reg[3] <= 24'sb000000000000000000000000;
        Delay55_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay55_reg[0] <= Delay55_reg_next[0];
          Delay55_reg[1] <= Delay55_reg_next[1];
          Delay55_reg[2] <= Delay55_reg_next[2];
          Delay55_reg[3] <= Delay55_reg_next[3];
          Delay55_reg[4] <= Delay55_reg_next[4];
        end
      end
    end

  assign Delay55_out1 = Delay55_reg[4];
  assign Delay55_reg_next[0] = Givens_Internal_BW_Cell2_out7;
  assign Delay55_reg_next[1] = Delay55_reg[0];
  assign Delay55_reg_next[2] = Delay55_reg[1];
  assign Delay55_reg_next[3] = Delay55_reg[2];
  assign Delay55_reg_next[4] = Delay55_reg[3];



  always @(posedge clk)
    begin : Delay44_process
      if (reset == 1'b1) begin
        Delay44_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay44_out1 <= Givens_Boundary_Cell2_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay62_process
      if (reset == 1'b1) begin
        Delay62_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay62_out1 <= Givens_Boundary_Cell2_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay69_process
      if (reset == 1'b1) begin
        Delay69_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay69_out1 <= Givens_Boundary_Cell2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay71_process
      if (reset == 1'b1) begin
        Delay71_reg[0] <= 24'sb000000000000000000000000;
        Delay71_reg[1] <= 24'sb000000000000000000000000;
        Delay71_reg[2] <= 24'sb000000000000000000000000;
        Delay71_reg[3] <= 24'sb000000000000000000000000;
        Delay71_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay71_reg[0] <= Delay71_reg_next[0];
          Delay71_reg[1] <= Delay71_reg_next[1];
          Delay71_reg[2] <= Delay71_reg_next[2];
          Delay71_reg[3] <= Delay71_reg_next[3];
          Delay71_reg[4] <= Delay71_reg_next[4];
        end
      end
    end

  assign Delay71_out1 = Delay71_reg[4];
  assign Delay71_reg_next[0] = Givens_Internal_QR_Cell4_out2;
  assign Delay71_reg_next[1] = Delay71_reg[0];
  assign Delay71_reg_next[2] = Delay71_reg[1];
  assign Delay71_reg_next[3] = Delay71_reg[2];
  assign Delay71_reg_next[4] = Delay71_reg[3];



  always @(posedge clk)
    begin : Delay85_process
      if (reset == 1'b1) begin
        Delay85_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay85_out1 <= Givens_Boundary_Cell3_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay87_process
      if (reset == 1'b1) begin
        Delay87_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay87_out1 <= Delay85_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay48_process
      if (reset == 1'b1) begin
        Delay48_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay48_out1 <= Givens_Internal_BW_Cell1_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay32_process
      if (reset == 1'b1) begin
        Delay32_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay32_out1 <= Givens_Internal_QR_Cell4_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay60_process
      if (reset == 1'b1) begin
        Delay60_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay60_out1 <= Givens_Internal_QR_Cell4_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay59_process
      if (reset == 1'b1) begin
        Delay59_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay59_out1 <= Givens_Internal_QR_Cell4_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay68_process
      if (reset == 1'b1) begin
        Delay68_reg[0] <= 24'sb000000000000000000000000;
        Delay68_reg[1] <= 24'sb000000000000000000000000;
        Delay68_reg[2] <= 24'sb000000000000000000000000;
        Delay68_reg[3] <= 24'sb000000000000000000000000;
        Delay68_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay68_reg[0] <= Delay68_reg_next[0];
          Delay68_reg[1] <= Delay68_reg_next[1];
          Delay68_reg[2] <= Delay68_reg_next[2];
          Delay68_reg[3] <= Delay68_reg_next[3];
          Delay68_reg[4] <= Delay68_reg_next[4];
        end
      end
    end

  assign Delay68_out1 = Delay68_reg[4];
  assign Delay68_reg_next[0] = Givens_Internal_BW_Cell_out2;
  assign Delay68_reg_next[1] = Delay68_reg[0];
  assign Delay68_reg_next[2] = Delay68_reg[1];
  assign Delay68_reg_next[3] = Delay68_reg[2];
  assign Delay68_reg_next[4] = Delay68_reg[3];



  always @(posedge clk)
    begin : Delay73_process
      if (reset == 1'b1) begin
        Delay73_reg[0] <= 24'sb000000000000000000000000;
        Delay73_reg[1] <= 24'sb000000000000000000000000;
        Delay73_reg[2] <= 24'sb000000000000000000000000;
        Delay73_reg[3] <= 24'sb000000000000000000000000;
        Delay73_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay73_reg[0] <= Delay73_reg_next[0];
          Delay73_reg[1] <= Delay73_reg_next[1];
          Delay73_reg[2] <= Delay73_reg_next[2];
          Delay73_reg[3] <= Delay73_reg_next[3];
          Delay73_reg[4] <= Delay73_reg_next[4];
        end
      end
    end

  assign Delay73_out1 = Delay73_reg[4];
  assign Delay73_reg_next[0] = Givens_Internal_BW_Cell_out1;
  assign Delay73_reg_next[1] = Delay73_reg[0];
  assign Delay73_reg_next[2] = Delay73_reg[1];
  assign Delay73_reg_next[3] = Delay73_reg[2];
  assign Delay73_reg_next[4] = Delay73_reg[3];



  Givens_Internal_BW_Cell1 u_Givens_Internal_BW_Cell1 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay73_out1),  // sfix24_En14
                                                       .uin_i(Delay68_out1),  // sfix24_En14
                                                       .cin(Delay59_out1),  // sfix24_En14
                                                       .sin_r(Delay60_out1),  // sfix24_En14
                                                       .sin_i(Delay32_out1),  // sfix24_En14
                                                       .Enable(Delay36_out1),
                                                       .uout_r(Givens_Internal_BW_Cell1_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_BW_Cell1_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_BW_Cell1_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_BW_Cell1_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_BW_Cell1_out5),  // sfix24_En14
                                                       .rout_i(Givens_Internal_BW_Cell1_out6),  // sfix24_En14
                                                       .rout_r(Givens_Internal_BW_Cell1_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay49_process
      if (reset == 1'b1) begin
        Delay49_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay49_out1 <= Givens_Internal_BW_Cell1_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay58_process
      if (reset == 1'b1) begin
        Delay58_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay58_out1 <= Givens_Internal_QR_Cell3_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay57_process
      if (reset == 1'b1) begin
        Delay57_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay57_out1 <= Givens_Internal_QR_Cell3_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay91_process
      if (reset == 1'b1) begin
        Delay91_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay91_out1 <= Givens_Boundary_Cell2_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay61_process
      if (reset == 1'b1) begin
        Delay61_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay61_out1 <= Givens_Internal_QR_Cell5_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay63_process
      if (reset == 1'b1) begin
        Delay63_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay63_out1 <= Givens_Internal_QR_Cell5_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay38_process
      if (reset == 1'b1) begin
        Delay38_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay38_out1 <= Givens_Internal_QR_Cell3_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay34_process
      if (reset == 1'b1) begin
        Delay34_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay34_out1 <= Givens_Internal_QR_Cell3_out1;
        end
      end
    end



  Givens_Boundary_Cell2 u_Givens_Boundary_Cell2 (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .uin_r(Delay34_out1),  // sfix24_En14
                                                 .uin_i(Delay38_out1),  // sfix24_En14
                                                 .En_bp(Delay99_out1),
                                                 .Bin_r(Delay63_out1),  // sfix24_En14
                                                 .Bin_i(Delay61_out1),  // sfix24_En14
                                                 .Enable(Delay67_out1),
                                                 .c_out(Givens_Boundary_Cell2_out1),  // sfix24_En14
                                                 .sout_r(Givens_Boundary_Cell2_out2),  // sfix24_En14
                                                 .sout_i(Givens_Boundary_Cell2_out3),  // sfix24_En14
                                                 .rout_r(Givens_Boundary_Cell2_out4),  // sfix24_En14
                                                 .rout_i(Givens_Boundary_Cell2_out5)  // sfix24_En14
                                                 );

  always @(posedge clk)
    begin : Delay90_process
      if (reset == 1'b1) begin
        Delay90_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay90_out1 <= Givens_Boundary_Cell2_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay50_process
      if (reset == 1'b1) begin
        Delay50_reg[0] <= 24'sb000000000000000000000000;
        Delay50_reg[1] <= 24'sb000000000000000000000000;
        Delay50_reg[2] <= 24'sb000000000000000000000000;
        Delay50_reg[3] <= 24'sb000000000000000000000000;
        Delay50_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay50_reg[0] <= Delay50_reg_next[0];
          Delay50_reg[1] <= Delay50_reg_next[1];
          Delay50_reg[2] <= Delay50_reg_next[2];
          Delay50_reg[3] <= Delay50_reg_next[3];
          Delay50_reg[4] <= Delay50_reg_next[4];
        end
      end
    end

  assign Delay50_out1 = Delay50_reg[4];
  assign Delay50_reg_next[0] = Givens_Internal_QR_Cell4_out7;
  assign Delay50_reg_next[1] = Delay50_reg[0];
  assign Delay50_reg_next[2] = Delay50_reg[1];
  assign Delay50_reg_next[3] = Delay50_reg[2];
  assign Delay50_reg_next[4] = Delay50_reg[3];



  always @(posedge clk)
    begin : Delay51_process
      if (reset == 1'b1) begin
        Delay51_reg[0] <= 24'sb000000000000000000000000;
        Delay51_reg[1] <= 24'sb000000000000000000000000;
        Delay51_reg[2] <= 24'sb000000000000000000000000;
        Delay51_reg[3] <= 24'sb000000000000000000000000;
        Delay51_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay51_reg[0] <= Delay51_reg_next[0];
          Delay51_reg[1] <= Delay51_reg_next[1];
          Delay51_reg[2] <= Delay51_reg_next[2];
          Delay51_reg[3] <= Delay51_reg_next[3];
          Delay51_reg[4] <= Delay51_reg_next[4];
        end
      end
    end

  assign Delay51_out1 = Delay51_reg[4];
  assign Delay51_reg_next[0] = Givens_Internal_QR_Cell4_out6;
  assign Delay51_reg_next[1] = Delay51_reg[0];
  assign Delay51_reg_next[2] = Delay51_reg[1];
  assign Delay51_reg_next[3] = Delay51_reg[2];
  assign Delay51_reg_next[4] = Delay51_reg[3];



  always @(posedge clk)
    begin : Delay42_process
      if (reset == 1'b1) begin
        Delay42_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay42_out1 <= Givens_Boundary_Cell1_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay53_process
      if (reset == 1'b1) begin
        Delay53_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay53_out1 <= Givens_Boundary_Cell1_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay52_process
      if (reset == 1'b1) begin
        Delay52_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay52_out1 <= Givens_Internal_QR_Cell3_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay54_process
      if (reset == 1'b1) begin
        Delay54_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay54_out1 <= Givens_Internal_QR_Cell3_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay100_process
      if (reset == 1'b1) begin
        Delay100_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay100_out1 <= Givens_Internal_QR_Cell_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay33_process
      if (reset == 1'b1) begin
        Delay33_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay33_out1 <= Givens_Internal_QR_Cell_out1;
        end
      end
    end



  Givens_Boundary_Cell1 u_Givens_Boundary_Cell1 (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .uin_r(Delay33_out1),  // sfix24_En14
                                                 .uin_i(Delay100_out1),  // sfix24_En14
                                                 .En_bp(Delay103_out1),
                                                 .Bin_r(Delay54_out1),  // sfix24_En14
                                                 .Bin_i(Delay52_out1),  // sfix24_En14
                                                 .Enable(Delay4_out1),
                                                 .c_out(Givens_Boundary_Cell1_out1),  // sfix24_En14
                                                 .sout_r(Givens_Boundary_Cell1_out2),  // sfix24_En14
                                                 .sout_i(Givens_Boundary_Cell1_out3),  // sfix24_En14
                                                 .rout_r(Givens_Boundary_Cell1_out4),  // sfix24_En14
                                                 .rout_i(Givens_Boundary_Cell1_out5)  // sfix24_En14
                                                 );

  always @(posedge clk)
    begin : Delay31_process
      if (reset == 1'b1) begin
        Delay31_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay31_out1 <= Givens_Boundary_Cell1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay40_process
      if (reset == 1'b1) begin
        Delay40_reg[0] <= 24'sb000000000000000000000000;
        Delay40_reg[1] <= 24'sb000000000000000000000000;
        Delay40_reg[2] <= 24'sb000000000000000000000000;
        Delay40_reg[3] <= 24'sb000000000000000000000000;
        Delay40_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay40_reg[0] <= Delay40_reg_next[0];
          Delay40_reg[1] <= Delay40_reg_next[1];
          Delay40_reg[2] <= Delay40_reg_next[2];
          Delay40_reg[3] <= Delay40_reg_next[3];
          Delay40_reg[4] <= Delay40_reg_next[4];
        end
      end
    end

  assign Delay40_out1 = Delay40_reg[4];
  assign Delay40_reg_next[0] = Givens_Internal_QR_Cell1_out2;
  assign Delay40_reg_next[1] = Delay40_reg[0];
  assign Delay40_reg_next[2] = Delay40_reg[1];
  assign Delay40_reg_next[3] = Delay40_reg[2];
  assign Delay40_reg_next[4] = Delay40_reg[3];



  always @(posedge clk)
    begin : Delay39_process
      if (reset == 1'b1) begin
        Delay39_reg[0] <= 24'sb000000000000000000000000;
        Delay39_reg[1] <= 24'sb000000000000000000000000;
        Delay39_reg[2] <= 24'sb000000000000000000000000;
        Delay39_reg[3] <= 24'sb000000000000000000000000;
        Delay39_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay39_reg[0] <= Delay39_reg_next[0];
          Delay39_reg[1] <= Delay39_reg_next[1];
          Delay39_reg[2] <= Delay39_reg_next[2];
          Delay39_reg[3] <= Delay39_reg_next[3];
          Delay39_reg[4] <= Delay39_reg_next[4];
        end
      end
    end

  assign Delay39_out1 = Delay39_reg[4];
  assign Delay39_reg_next[0] = Givens_Internal_QR_Cell1_out1;
  assign Delay39_reg_next[1] = Delay39_reg[0];
  assign Delay39_reg_next[2] = Delay39_reg[1];
  assign Delay39_reg_next[3] = Delay39_reg[2];
  assign Delay39_reg_next[4] = Delay39_reg[3];



  Givens_Internal_QR_Cell3 u_Givens_Internal_QR_Cell3 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay39_out1),  // sfix24_En14
                                                       .uin_i(Delay40_out1),  // sfix24_En14
                                                       .cin(Delay31_out1),  // sfix24_En14
                                                       .sin_r(Delay53_out1),  // sfix24_En14
                                                       .sin_i(Delay42_out1),  // sfix24_En14
                                                       .Bin_r(Delay51_out1),  // sfix24_En14
                                                       .Bin_i(Delay50_out1),  // sfix24_En14
                                                       .Xin_r(Delay90_out1),  // sfix24_En14
                                                       .Xin_i(Delay91_out1),  // sfix24_En14
                                                       .en_bp(Delay102_out1),
                                                       .Enable(Delay13_out1),
                                                       .uout_r(Givens_Internal_QR_Cell3_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_QR_Cell3_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_QR_Cell3_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_QR_Cell3_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_QR_Cell3_out5),  // sfix24_En14
                                                       .rout_r(Givens_Internal_QR_Cell3_out6),  // sfix24_En14
                                                       .rout_i(Givens_Internal_QR_Cell3_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay56_process
      if (reset == 1'b1) begin
        Delay56_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay56_out1 <= Givens_Internal_QR_Cell3_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay43_process
      if (reset == 1'b1) begin
        Delay43_reg[0] <= 24'sb000000000000000000000000;
        Delay43_reg[1] <= 24'sb000000000000000000000000;
        Delay43_reg[2] <= 24'sb000000000000000000000000;
        Delay43_reg[3] <= 24'sb000000000000000000000000;
        Delay43_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay43_reg[0] <= Delay43_reg_next[0];
          Delay43_reg[1] <= Delay43_reg_next[1];
          Delay43_reg[2] <= Delay43_reg_next[2];
          Delay43_reg[3] <= Delay43_reg_next[3];
          Delay43_reg[4] <= Delay43_reg_next[4];
        end
      end
    end

  assign Delay43_out1 = Delay43_reg[4];
  assign Delay43_reg_next[0] = Givens_Internal_QR_Cell2_out2;
  assign Delay43_reg_next[1] = Delay43_reg[0];
  assign Delay43_reg_next[2] = Delay43_reg[1];
  assign Delay43_reg_next[3] = Delay43_reg[2];
  assign Delay43_reg_next[4] = Delay43_reg[3];



  always @(posedge clk)
    begin : Delay41_process
      if (reset == 1'b1) begin
        Delay41_reg[0] <= 24'sb000000000000000000000000;
        Delay41_reg[1] <= 24'sb000000000000000000000000;
        Delay41_reg[2] <= 24'sb000000000000000000000000;
        Delay41_reg[3] <= 24'sb000000000000000000000000;
        Delay41_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay41_reg[0] <= Delay41_reg_next[0];
          Delay41_reg[1] <= Delay41_reg_next[1];
          Delay41_reg[2] <= Delay41_reg_next[2];
          Delay41_reg[3] <= Delay41_reg_next[3];
          Delay41_reg[4] <= Delay41_reg_next[4];
        end
      end
    end

  assign Delay41_out1 = Delay41_reg[4];
  assign Delay41_reg_next[0] = Givens_Internal_QR_Cell2_out1;
  assign Delay41_reg_next[1] = Delay41_reg[0];
  assign Delay41_reg_next[2] = Delay41_reg[1];
  assign Delay41_reg_next[3] = Delay41_reg[2];
  assign Delay41_reg_next[4] = Delay41_reg[3];



  Givens_Internal_QR_Cell4 u_Givens_Internal_QR_Cell4 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay41_out1),  // sfix24_En14
                                                       .uin_i(Delay43_out1),  // sfix24_En14
                                                       .cin(Delay56_out1),  // sfix24_En14
                                                       .sin_r(Delay57_out1),  // sfix24_En14
                                                       .sin_i(Delay58_out1),  // sfix24_En14
                                                       .Bin_r(Delay49_out1),  // sfix24_En14
                                                       .Bin_i(Delay48_out1),  // sfix24_En14
                                                       .Xin_r(Delay86_out1),  // sfix24_En14
                                                       .Xin_i(Delay87_out1),  // sfix24_En14
                                                       .en_bp(Delay101_out1),
                                                       .Enable(Delay35_out1),
                                                       .uout_r(Givens_Internal_QR_Cell4_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_QR_Cell4_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_QR_Cell4_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_QR_Cell4_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_QR_Cell4_out5),  // sfix24_En14
                                                       .rout_r(Givens_Internal_QR_Cell4_out6),  // sfix24_En14
                                                       .rout_i(Givens_Internal_QR_Cell4_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay70_process
      if (reset == 1'b1) begin
        Delay70_reg[0] <= 24'sb000000000000000000000000;
        Delay70_reg[1] <= 24'sb000000000000000000000000;
        Delay70_reg[2] <= 24'sb000000000000000000000000;
        Delay70_reg[3] <= 24'sb000000000000000000000000;
        Delay70_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay70_reg[0] <= Delay70_reg_next[0];
          Delay70_reg[1] <= Delay70_reg_next[1];
          Delay70_reg[2] <= Delay70_reg_next[2];
          Delay70_reg[3] <= Delay70_reg_next[3];
          Delay70_reg[4] <= Delay70_reg_next[4];
        end
      end
    end

  assign Delay70_out1 = Delay70_reg[4];
  assign Delay70_reg_next[0] = Givens_Internal_QR_Cell4_out1;
  assign Delay70_reg_next[1] = Delay70_reg[0];
  assign Delay70_reg_next[2] = Delay70_reg[1];
  assign Delay70_reg_next[3] = Delay70_reg[2];
  assign Delay70_reg_next[4] = Delay70_reg[3];



  Givens_Internal_QR_Cell5 u_Givens_Internal_QR_Cell5 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay70_out1),  // sfix24_En14
                                                       .uin_i(Delay71_out1),  // sfix24_En14
                                                       .cin(Delay69_out1),  // sfix24_En14
                                                       .sin_r(Delay62_out1),  // sfix24_En14
                                                       .sin_i(Delay44_out1),  // sfix24_En14
                                                       .Bin_r(Delay55_out1),  // sfix24_En14
                                                       .Bin_i(Delay47_out1),  // sfix24_En14
                                                       .Xin_r(Delay84_out1),  // sfix24_En14
                                                       .Xin_i(Delay85_out1),  // sfix24_En14
                                                       .en_bp(Delay98_out1),
                                                       .Enable(Delay81_out1),
                                                       .uout_r(Givens_Internal_QR_Cell5_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_QR_Cell5_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_QR_Cell5_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_QR_Cell5_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_QR_Cell5_out5),  // sfix24_En14
                                                       .rout_r(Givens_Internal_QR_Cell5_out6),  // sfix24_En14
                                                       .rout_i(Givens_Internal_QR_Cell5_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay74_process
      if (reset == 1'b1) begin
        Delay74_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay74_out1 <= Givens_Internal_QR_Cell5_out1;
        end
      end
    end



  Givens_Boundary_Cell3 u_Givens_Boundary_Cell3 (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .uin_r(Delay74_out1),  // sfix24_En14
                                                 .uin_i(Delay75_out1),  // sfix24_En14
                                                 .En_bp(en_bp44),
                                                 .Bin_r(Delay83_out1),  // sfix24_En14
                                                 .Bin_i(Delay82_out1),  // sfix24_En14
                                                 .Enable(Delay108_out1),
                                                 .c_out(Givens_Boundary_Cell3_out1),  // sfix24_En14
                                                 .sout_r(Givens_Boundary_Cell3_out2),  // sfix24_En14
                                                 .sout_i(Givens_Boundary_Cell3_out3),  // sfix24_En14
                                                 .rout_r(Givens_Boundary_Cell3_out4),  // sfix24_En14
                                                 .rout_i(Givens_Boundary_Cell3_out5)  // sfix24_En14
                                                 );

  always @(posedge clk)
    begin : Delay84_process
      if (reset == 1'b1) begin
        Delay84_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay84_out1 <= Givens_Boundary_Cell3_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay86_process
      if (reset == 1'b1) begin
        Delay86_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay86_out1 <= Delay84_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay88_process
      if (reset == 1'b1) begin
        Delay88_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay88_out1 <= Delay86_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Givens_Internal_BW_Cell_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= Givens_Internal_QR_Cell2_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= Givens_Internal_QR_Cell2_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Givens_Internal_QR_Cell2_out3;
        end
      end
    end



  Givens_Internal_BW_Cell u_Givens_Internal_BW_Cell (.clk(clk),
                                                     .reset(reset),
                                                     .enb(enb),
                                                     .uin_r(Delay23_out1),  // sfix24_En14
                                                     .uin_i(Delay24_out1),  // sfix24_En14
                                                     .cin(Delay14_out1),  // sfix24_En14
                                                     .sin_r(Delay15_out1),  // sfix24_En14
                                                     .sin_i(Delay16_out1),  // sfix24_En14
                                                     .Enable(Delay35_out1),
                                                     .uout_r(Givens_Internal_BW_Cell_out1),  // sfix24_En14
                                                     .uout_i(Givens_Internal_BW_Cell_out2),  // sfix24_En14
                                                     .cout(Givens_Internal_BW_Cell_out3),  // sfix24_En14
                                                     .sout_r(Givens_Internal_BW_Cell_out4),  // sfix24_En14
                                                     .sout_i(Givens_Internal_BW_Cell_out5),  // sfix24_En14
                                                     .rout_i(Givens_Internal_BW_Cell_out6),  // sfix24_En14
                                                     .rout_r(Givens_Internal_BW_Cell_out7)  // sfix24_En14
                                                     );

  always @(posedge clk)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Givens_Internal_BW_Cell_out7;
        end
      end
    end



  always @(posedge clk)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Givens_Internal_QR_Cell1_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Givens_Internal_QR_Cell1_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Givens_Internal_QR_Cell1_out3;
        end
      end
    end



  Givens_Internal_QR_Cell2 u_Givens_Internal_QR_Cell2 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay21_out1),  // sfix24_En14
                                                       .uin_i(Delay22_out1),  // sfix24_En14
                                                       .cin(Delay8_out1),  // sfix24_En14
                                                       .sin_r(Delay9_out1),  // sfix24_En14
                                                       .sin_i(Delay10_out1),  // sfix24_En14
                                                       .Bin_r(Delay26_out1),  // sfix24_En14
                                                       .Bin_i(Delay25_out1),  // sfix24_En14
                                                       .Xin_r(Delay88_out1),  // sfix24_En14
                                                       .Xin_i(Delay89_out1),  // sfix24_En14
                                                       .en_bp(Delay104_out1),
                                                       .Enable(Delay13_out1),
                                                       .uout_r(Givens_Internal_QR_Cell2_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_QR_Cell2_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_QR_Cell2_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_QR_Cell2_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_QR_Cell2_out5),  // sfix24_En14
                                                       .rout_r(Givens_Internal_QR_Cell2_out6),  // sfix24_En14
                                                       .rout_i(Givens_Internal_QR_Cell2_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay94_process
      if (reset == 1'b1) begin
        Delay94_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay94_out1 <= Givens_Internal_QR_Cell2_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Givens_Internal_QR_Cell_out5;
        end
      end
    end



  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Givens_Internal_QR_Cell_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Givens_Internal_QR_Cell_out3;
        end
      end
    end



  Givens_Internal_QR_Cell1 u_Givens_Internal_QR_Cell1 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .uin_r(Delay19_out1),  // sfix24_En14
                                                       .uin_i(Delay20_out1),  // sfix24_En14
                                                       .cin(Delay5_out1),  // sfix24_En14
                                                       .sin_r(Delay6_out1),  // sfix24_En14
                                                       .sin_i(Delay7_out1),  // sfix24_En14
                                                       .Bin_r(Delay94_out1),  // sfix24_En14
                                                       .Bin_i(Delay95_out1),  // sfix24_En14
                                                       .Xin_r(Delay93_out1),  // sfix24_En14
                                                       .Xin_i(Delay92_out1),  // sfix24_En14
                                                       .en_bp(Delay105_out1),
                                                       .Enable(Delay12_out1),
                                                       .uout_r(Givens_Internal_QR_Cell1_out1),  // sfix24_En14
                                                       .uout_i(Givens_Internal_QR_Cell1_out2),  // sfix24_En14
                                                       .cout(Givens_Internal_QR_Cell1_out3),  // sfix24_En14
                                                       .sout_r(Givens_Internal_QR_Cell1_out4),  // sfix24_En14
                                                       .sout_i(Givens_Internal_QR_Cell1_out5),  // sfix24_En14
                                                       .rout_r(Givens_Internal_QR_Cell1_out6),  // sfix24_En14
                                                       .rout_i(Givens_Internal_QR_Cell1_out7)  // sfix24_En14
                                                       );

  always @(posedge clk)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_reg[0] <= 24'sb000000000000000000000000;
        Delay28_reg[1] <= 24'sb000000000000000000000000;
        Delay28_reg[2] <= 24'sb000000000000000000000000;
        Delay28_reg[3] <= 24'sb000000000000000000000000;
        Delay28_reg[4] <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay28_reg[0] <= Delay28_reg_next[0];
          Delay28_reg[1] <= Delay28_reg_next[1];
          Delay28_reg[2] <= Delay28_reg_next[2];
          Delay28_reg[3] <= Delay28_reg_next[3];
          Delay28_reg[4] <= Delay28_reg_next[4];
        end
      end
    end

  assign Delay28_out1 = Delay28_reg[4];
  assign Delay28_reg_next[0] = Givens_Internal_QR_Cell1_out6;
  assign Delay28_reg_next[1] = Delay28_reg[0];
  assign Delay28_reg_next[2] = Delay28_reg[1];
  assign Delay28_reg_next[3] = Delay28_reg[2];
  assign Delay28_reg_next[4] = Delay28_reg[3];



  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Givens_Boundary_Cell_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Givens_Boundary_Cell_out2;
        end
      end
    end



  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Givens_Boundary_Cell_out1;
        end
      end
    end



  Givens_Internal_QR_Cell u_Givens_Internal_QR_Cell (.clk(clk),
                                                     .reset(reset),
                                                     .enb(enb),
                                                     .uin_r(Delay17_out1),  // sfix24_En14
                                                     .uin_i(Delay18_out1),  // sfix24_En14
                                                     .cin(Delay1_out1),  // sfix24_En14
                                                     .sin_r(Delay3_out1),  // sfix24_En14
                                                     .sin_i(Delay2_out1),  // sfix24_En14
                                                     .Bin_r(Delay28_out1),  // sfix24_En14
                                                     .Bin_i(Delay27_out1),  // sfix24_En14
                                                     .Xin_r(Delay97_out1),  // sfix24_En14
                                                     .Xin_i(Delay96_out1),  // sfix24_En14
                                                     .en_bp(Delay106_out1),
                                                     .Enable(Delay11_out1),
                                                     .uout_r(Givens_Internal_QR_Cell_out1),  // sfix24_En14
                                                     .uout_i(Givens_Internal_QR_Cell_out2),  // sfix24_En14
                                                     .cout(Givens_Internal_QR_Cell_out3),  // sfix24_En14
                                                     .sout_r(Givens_Internal_QR_Cell_out4),  // sfix24_En14
                                                     .sout_i(Givens_Internal_QR_Cell_out5),  // sfix24_En14
                                                     .rout_r(Givens_Internal_QR_Cell_out6),  // sfix24_En14
                                                     .rout_i(Givens_Internal_QR_Cell_out7)  // sfix24_En14
                                                     );

  always @(posedge clk)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= Givens_Internal_QR_Cell_out6;
        end
      end
    end



  Givens_Boundary_Cell u_Givens_Boundary_Cell (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .enb_2_1_0(enb_2_1_0),
                                               .uin_r(A1_r),  // sfix24_En14
                                               .uin_i(A1_i),  // sfix24_En14
                                               .En_bp(Delay107_out1),
                                               .Bin_r(Delay30_out1),  // sfix24_En14
                                               .Bin_i(Delay29_out1),  // sfix24_En14
                                               .Enable(en_in11),
                                               .c_out(Givens_Boundary_Cell_out1),  // sfix24_En14
                                               .sout_r(Givens_Boundary_Cell_out2),  // sfix24_En14
                                               .sout_i(Givens_Boundary_Cell_out3),  // sfix24_En14
                                               .rout_r(Givens_Boundary_Cell_out4),  // sfix24_En14
                                               .rout_i(Givens_Boundary_Cell_out5)  // sfix24_En14
                                               );

  assign R_11_r = Givens_Boundary_Cell_out4;

  assign R_11_i = Givens_Boundary_Cell_out5;

  assign R_12_r = Givens_Internal_QR_Cell_out6;

  assign R_12_i = Givens_Internal_QR_Cell_out7;

  assign R_13_r = Givens_Internal_QR_Cell1_out6;

  assign R_13_i = Givens_Internal_QR_Cell1_out7;

  assign R_14_r = Givens_Internal_QR_Cell2_out6;

  assign R_14_i = Givens_Internal_QR_Cell2_out7;

  assign R_22_r = Givens_Boundary_Cell1_out4;

  assign R_22_i = Givens_Boundary_Cell1_out5;

  assign R_23_r = Givens_Internal_QR_Cell3_out6;

  assign R_23_i = Givens_Internal_QR_Cell3_out7;

  assign R_24_r = Givens_Internal_QR_Cell4_out6;

  assign R_24_i = Givens_Internal_QR_Cell4_out7;

  assign R_33_r = Givens_Boundary_Cell2_out4;

  assign R_33_i = Givens_Boundary_Cell2_out5;

  assign R_34_r = Givens_Internal_QR_Cell5_out6;

  assign R_34_i = Givens_Internal_QR_Cell5_out7;

  assign R_44_r = Givens_Boundary_Cell3_out4;

  assign R_44_i = Givens_Boundary_Cell3_out5;

  assign boutr_1 = Givens_Internal_BW_Cell_out7;

  assign bouti_1 = Givens_Internal_BW_Cell_out6;

  assign boutr_2 = Givens_Internal_BW_Cell1_out7;

  assign bouti_2 = Givens_Internal_BW_Cell1_out6;

  assign boutr_3 = Givens_Internal_BW_Cell2_out7;

  assign bouti_3 = Givens_Internal_BW_Cell2_out6;

  assign boutr_4 = Givens_Internal_BW_Cell3_out7;

  assign bouti_4 = Givens_Internal_BW_Cell3_out6;

  assign ce_out = enb_1_1_1;

endmodule  // fourxfour_designfxdpt

