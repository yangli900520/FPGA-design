// -------------------------------------------------------------
// 
// File Name: /home/yangli18/Documents/yangzai/PFC/qr_simulink/HDL/qr10/fourxfour_designfxdpt_givens/HDL_Reciprocal_core_block.v
// Created: 2019-10-01 15:17:02
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Reciprocal_core_block
// Source Path: fourxfour_designfxdpt_givens/fourxfour_designfxdpt/Givens_Boundary_Cell1/HDL Reciprocal/HDL Reciprocal_core
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Reciprocal_core_block
          (clk,
           reset,
           enb,
           enb_2_1_0,
           xin,
           ain,
           sel,
           xout,
           aout);


  input   clk;
  input   reset;
  input   enb;
  input   enb_2_1_0;
  input   [48:0] xin;  // ufix49_En47
  input   [49:0] ain;  // ufix50_En50
  input   sel;  // ufix1
  output  [48:0] xout;  // ufix49_En47
  output  [49:0] aout;  // ufix50_En50


  wire [48:0] ain_dtc;  // ufix49_En47
  wire [48:0] const2;  // ufix49_En47
  wire [48:0] mulout;  // ufix49_En47
  reg [48:0] delayout;  // ufix49_En47
  wire [49:0] subtractor_sub_cast;  // ufix50_En47
  wire [49:0] subtractor_sub_cast_1;  // ufix50_En47
  wire [49:0] subtractor_sub_temp;  // ufix50_En47
  wire [48:0] subout;  // ufix49_En47
  wire [48:0] muxout;  // ufix49_En47
  wire [97:0] mul1_mul_temp;  // ufix98_En94
  reg [48:0] xout_1;  // ufix49_En47
  reg [49:0] aout_1;  // ufix50_En50

  // Iteration Core of the Recip Implementation using Newton Method


  assign ain_dtc = {2'b0, ain[49:3]};



  assign const2 = 49'h1000000000000;



  always @(posedge clk)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        delayout <= 49'h0000000000000;
      end
      else begin
        if (enb_2_1_0) begin
          delayout <= mulout;
        end
      end
    end



  assign subtractor_sub_cast = {1'b0, const2};
  assign subtractor_sub_cast_1 = {1'b0, delayout};
  assign subtractor_sub_temp = subtractor_sub_cast - subtractor_sub_cast_1;
  assign subout = (subtractor_sub_temp[49] != 1'b0 ? 49'h1FFFFFFFFFFFF :
              subtractor_sub_temp[48:0]);



  assign muxout = (sel == 1'b0 ? ain_dtc :
              subout);



  assign mul1_mul_temp = xin * muxout;
  assign mulout = (mul1_mul_temp[97:96] != 2'b00 ? 49'h1FFFFFFFFFFFF :
              mul1_mul_temp[95:47]);



  always @(posedge clk)
    begin : xout_reg_process
      if (reset == 1'b1) begin
        xout_1 <= 49'h0000000000000;
      end
      else begin
        if (enb) begin
          xout_1 <= mulout;
        end
      end
    end



  always @(posedge clk)
    begin : aout_reg_process
      if (reset == 1'b1) begin
        aout_1 <= 50'h0000000000000;
      end
      else begin
        if (enb) begin
          aout_1 <= ain;
        end
      end
    end



  assign xout = xout_1;

  assign aout = aout_1;

endmodule  // HDL_Reciprocal_core_block

