// -------------------------------------------------------------
// 
// File Name: /home/yangli18/Documents/yangzai/PFC/qr_simulink/HDL/qr10/fourxfour_designfxdpt_givens/HDL_Reciprocal_block1.v
// Created: 2019-10-01 15:17:02
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Reciprocal_block1
// Source Path: fourxfour_designfxdpt_givens/fourxfour_designfxdpt/Givens_Boundary_Cell3/HDL Reciprocal
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Reciprocal_block1
          (clk,
           reset,
           enb,
           enb_2_1_0,
           din,
           dout);


  input   clk;
  input   reset;
  input   enb;
  input   enb_2_1_0;
  input   [48:0] din;  // ufix49_En28
  output  [48:0] dout;  // ufix49_En20


  reg [49:0] anorm;  // ufix50_En50
  reg [5:0] dynamicshift;  // ufix6
  reg  onemoreshift;  // ufix1
  reg [49:0] anorm_p;  // ufix50_En50
  wire mstwobit;  // ufix1
  wire inzero;  // ufix1
  reg  [0:2] inzero_reg_reg;  // ufix1 [3]
  wire [0:2] inzero_reg_reg_next;  // ufix1 [3]
  wire inzero_p;  // ufix1
  wire [48:0] x0;  // ufix49_En47
  reg  sel;  // ufix1
  wire [48:0] xstage1;  // ufix49_En47
  wire [49:0] astage1;  // ufix50_En50
  wire [48:0] xstage2;  // ufix49_En47
  wire [49:0] astage2;  // ufix50_En50
  wire [48:0] xstage3;  // ufix49_En47
  wire [49:0] astage3;  // ufix50_En50
  reg [5:0] ds_reg_reg [0:3];  // ufix6 [4]
  wire [5:0] ds_reg_reg_next [0:3];  // ufix6 [4]
  wire [5:0] dynamicshift_p;  // ufix6
  wire [48:0] constInf;  // ufix49_En20
  reg  [0:3] onemoreshift_reg_reg;  // ufix1 [4]
  wire [0:3] onemoreshift_reg_reg_next;  // ufix1 [4]
  wire onemoreshift_p;  // ufix1
  reg [48:0] denormout;  // ufix49_En20
  reg [5:0] in_norm_out1_0;  // ufix6
  reg [49:0] in_norm_anorm;  // ufix50_En50
  reg [49:0] in_norm_c;  // ufix50_En50
  reg  in_norm_c_r;  // ufix1
  reg [1:0] in_norm_anorm_0;  // ufix2
  reg [1:0] in_norm_anorm_1;  // ufix2
  reg [1:0] in_norm_anorm_2;  // ufix2
  reg [1:0] in_norm_anorm_3;  // ufix2
  reg [5:0] in_norm_out1_0_0;  // ufix6
  reg [7:0] in_norm_cast;  // uint8
  reg [1:0] in_norm_anorm_4;  // ufix2
  reg [1:0] in_norm_anorm_5;  // ufix2
  reg [1:0] in_norm_anorm_6;  // ufix2
  reg [1:0] in_norm_anorm_7;  // ufix2
  reg [1:0] in_norm_anorm_8;  // ufix2
  reg [1:0] in_norm_anorm_9;  // ufix2
  reg [1:0] in_norm_anorm_10;  // ufix2
  reg [1:0] in_norm_anorm_11;  // ufix2
  reg [1:0] in_norm_anorm_12;  // ufix2
  reg [1:0] in_norm_anorm_13;  // ufix2
  reg [1:0] in_norm_anorm_14;  // ufix2
  reg [1:0] in_norm_anorm_15;  // ufix2
  reg [1:0] in_norm_anorm_16;  // ufix2
  reg [1:0] in_norm_anorm_17;  // ufix2
  reg [1:0] in_norm_anorm_18;  // ufix2
  reg [1:0] in_norm_anorm_19;  // ufix2
  reg [1:0] in_norm_anorm_20;  // ufix2
  reg [1:0] in_norm_anorm_21;  // ufix2
  reg [1:0] in_norm_anorm_22;  // ufix2
  reg [1:0] in_norm_anorm_23;  // ufix2
  reg [48:0] out_denorm_shiftarr [0:24];  // ufix49_En47 [25]
  reg [6:0] out_denorm_c;  // ufix7
  reg [6:0] out_denorm_t_0_0;  // ufix7

  // Multi-rate Reciprocal Implementation using Reciprocal Newton Method


  // Input Normalization
  always @(din) begin
    in_norm_anorm = {1'b0, din};
    in_norm_anorm_0 = in_norm_anorm[49:48];
    if ((|in_norm_anorm_0[1:0]) == 1'b1) begin
      in_norm_out1_0 = 6'b000000;
    end
    else begin
      in_norm_anorm_1 = in_norm_anorm[47:46];
      if ((|in_norm_anorm_1[1:0]) == 1'b1) begin
        in_norm_out1_0 = 6'b000001;
      end
      else begin
        in_norm_anorm_2 = in_norm_anorm[45:44];
        if ((|in_norm_anorm_2[1:0]) == 1'b1) begin
          in_norm_out1_0 = 6'b000010;
        end
        else begin
          in_norm_anorm_3 = in_norm_anorm[43:42];
          if ((|in_norm_anorm_3[1:0]) == 1'b1) begin
            in_norm_out1_0 = 6'b000011;
          end
          else begin
            in_norm_anorm_4 = in_norm_anorm[41:40];
            if ((|in_norm_anorm_4[1:0]) == 1'b1) begin
              in_norm_out1_0 = 6'b000100;
            end
            else begin
              in_norm_anorm_5 = in_norm_anorm[39:38];
              if ((|in_norm_anorm_5[1:0]) == 1'b1) begin
                in_norm_out1_0 = 6'b000101;
              end
              else begin
                in_norm_anorm_6 = in_norm_anorm[37:36];
                if ((|in_norm_anorm_6[1:0]) == 1'b1) begin
                  in_norm_out1_0 = 6'b000110;
                end
                else begin
                  in_norm_anorm_7 = in_norm_anorm[35:34];
                  if ((|in_norm_anorm_7[1:0]) == 1'b1) begin
                    in_norm_out1_0 = 6'b000111;
                  end
                  else begin
                    in_norm_anorm_8 = in_norm_anorm[33:32];
                    if ((|in_norm_anorm_8[1:0]) == 1'b1) begin
                      in_norm_out1_0 = 6'b001000;
                    end
                    else begin
                      in_norm_anorm_9 = in_norm_anorm[31:30];
                      if ((|in_norm_anorm_9[1:0]) == 1'b1) begin
                        in_norm_out1_0 = 6'b001001;
                      end
                      else begin
                        in_norm_anorm_10 = in_norm_anorm[29:28];
                        if ((|in_norm_anorm_10[1:0]) == 1'b1) begin
                          in_norm_out1_0 = 6'b001010;
                        end
                        else begin
                          in_norm_anorm_11 = in_norm_anorm[27:26];
                          if ((|in_norm_anorm_11[1:0]) == 1'b1) begin
                            in_norm_out1_0 = 6'b001011;
                          end
                          else begin
                            in_norm_anorm_12 = in_norm_anorm[25:24];
                            if ((|in_norm_anorm_12[1:0]) == 1'b1) begin
                              in_norm_out1_0 = 6'b001100;
                            end
                            else begin
                              in_norm_anorm_13 = in_norm_anorm[23:22];
                              if ((|in_norm_anorm_13[1:0]) == 1'b1) begin
                                in_norm_out1_0 = 6'b001101;
                              end
                              else begin
                                in_norm_anorm_14 = in_norm_anorm[21:20];
                                if ((|in_norm_anorm_14[1:0]) == 1'b1) begin
                                  in_norm_out1_0 = 6'b001110;
                                end
                                else begin
                                  in_norm_anorm_15 = in_norm_anorm[19:18];
                                  if ((|in_norm_anorm_15[1:0]) == 1'b1) begin
                                    in_norm_out1_0 = 6'b001111;
                                  end
                                  else begin
                                    in_norm_anorm_16 = in_norm_anorm[17:16];
                                    if ((|in_norm_anorm_16[1:0]) == 1'b1) begin
                                      in_norm_out1_0 = 6'b010000;
                                    end
                                    else begin
                                      in_norm_anorm_17 = in_norm_anorm[15:14];
                                      if ((|in_norm_anorm_17[1:0]) == 1'b1) begin
                                        in_norm_out1_0 = 6'b010001;
                                      end
                                      else begin
                                        in_norm_anorm_18 = in_norm_anorm[13:12];
                                        if ((|in_norm_anorm_18[1:0]) == 1'b1) begin
                                          in_norm_out1_0 = 6'b010010;
                                        end
                                        else begin
                                          in_norm_anorm_19 = in_norm_anorm[11:10];
                                          if ((|in_norm_anorm_19[1:0]) == 1'b1) begin
                                            in_norm_out1_0 = 6'b010011;
                                          end
                                          else begin
                                            in_norm_anorm_20 = in_norm_anorm[9:8];
                                            if ((|in_norm_anorm_20[1:0]) == 1'b1) begin
                                              in_norm_out1_0 = 6'b010100;
                                            end
                                            else begin
                                              in_norm_anorm_21 = in_norm_anorm[7:6];
                                              if ((|in_norm_anorm_21[1:0]) == 1'b1) begin
                                                in_norm_out1_0 = 6'b010101;
                                              end
                                              else begin
                                                in_norm_anorm_22 = in_norm_anorm[5:4];
                                                if ((|in_norm_anorm_22[1:0]) == 1'b1) begin
                                                  in_norm_out1_0 = 6'b010110;
                                                end
                                                else begin
                                                  in_norm_anorm_23 = in_norm_anorm[3:2];
                                                  if ((|in_norm_anorm_23[1:0]) == 1'b1) begin
                                                    in_norm_out1_0 = 6'b010111;
                                                  end
                                                  else begin
                                                    in_norm_out1_0 = 6'b011000;
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    in_norm_out1_0_0 = in_norm_out1_0 <<< 8'd1;
    in_norm_cast = {2'b0, in_norm_out1_0_0};
    in_norm_c = in_norm_anorm <<< in_norm_cast;
    in_norm_c_r =  ~ in_norm_c[49];
    if (in_norm_c_r == 1'b1) begin
      in_norm_c = in_norm_c <<< 8'd1;
    end
    anorm = in_norm_c;
    dynamicshift = in_norm_out1_0;
    onemoreshift = in_norm_c_r;
  end



  always @(posedge clk)
    begin : anorm_reg_process
      if (reset == 1'b1) begin
        anorm_p <= 50'h0000000000000;
      end
      else begin
        if (enb) begin
          anorm_p <= anorm;
        end
      end
    end



  assign mstwobit = anorm_p[49];



  assign inzero = mstwobit == 1'b0;



  // Pipeline registers
  always @(posedge clk)
    begin : inzero_reg_process
      if (reset == 1'b1) begin
        inzero_reg_reg[0] <= 1'b0;
        inzero_reg_reg[1] <= 1'b0;
        inzero_reg_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          inzero_reg_reg[0] <= inzero_reg_reg_next[0];
          inzero_reg_reg[1] <= inzero_reg_reg_next[1];
          inzero_reg_reg[2] <= inzero_reg_reg_next[2];
        end
      end
    end

  assign inzero_p = inzero_reg_reg[2];
  assign inzero_reg_reg_next[0] = inzero;
  assign inzero_reg_reg_next[1] = inzero_reg_reg[0];
  assign inzero_reg_reg_next[2] = inzero_reg_reg[1];



  assign x0 = 49'h0800000000000;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  // 
  // Selector signal counter
  always @(posedge clk)
    begin : sel_cnt_process
      if (reset == 1'b1) begin
        sel <= 1'b0;
      end
      else begin
        if (enb_2_1_0) begin
          sel <=  ~ sel;
        end
      end
    end



  HDL_Reciprocal_core_block1 u_core_stage1_inst (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .xin(x0),  // ufix49_En47
                                                 .ain(anorm_p),  // ufix50_En50
                                                 .sel(sel),  // ufix1
                                                 .xout(xstage1),  // ufix49_En47
                                                 .aout(astage1)  // ufix50_En50
                                                 );

  HDL_Reciprocal_core_block1 u_core_stage2_inst (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .xin(xstage1),  // ufix49_En47
                                                 .ain(astage1),  // ufix50_En50
                                                 .sel(sel),  // ufix1
                                                 .xout(xstage2),  // ufix49_En47
                                                 .aout(astage2)  // ufix50_En50
                                                 );

  HDL_Reciprocal_core_block1 u_core_stage3_inst (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .enb_2_1_0(enb_2_1_0),
                                                 .xin(xstage2),  // ufix49_En47
                                                 .ain(astage2),  // ufix50_En50
                                                 .sel(sel),  // ufix1
                                                 .xout(xstage3),  // ufix49_En47
                                                 .aout(astage3)  // ufix50_En50
                                                 );

  // Pipeline registers
  always @(posedge clk)
    begin : ds_reg_process
      if (reset == 1'b1) begin
        ds_reg_reg[0] <= 6'b000000;
        ds_reg_reg[1] <= 6'b000000;
        ds_reg_reg[2] <= 6'b000000;
        ds_reg_reg[3] <= 6'b000000;
      end
      else begin
        if (enb) begin
          ds_reg_reg[0] <= ds_reg_reg_next[0];
          ds_reg_reg[1] <= ds_reg_reg_next[1];
          ds_reg_reg[2] <= ds_reg_reg_next[2];
          ds_reg_reg[3] <= ds_reg_reg_next[3];
        end
      end
    end

  assign dynamicshift_p = ds_reg_reg[3];
  assign ds_reg_reg_next[0] = dynamicshift;
  assign ds_reg_reg_next[1] = ds_reg_reg[0];
  assign ds_reg_reg_next[2] = ds_reg_reg[1];
  assign ds_reg_reg_next[3] = ds_reg_reg[2];



  assign constInf = 49'h1FFFFFFFFFFFF;



  always @(posedge clk)
    begin : onemoreshift_reg_process
      if (reset == 1'b1) begin
        onemoreshift_reg_reg[0] <= 1'b0;
        onemoreshift_reg_reg[1] <= 1'b0;
        onemoreshift_reg_reg[2] <= 1'b0;
        onemoreshift_reg_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          onemoreshift_reg_reg[0] <= onemoreshift_reg_reg_next[0];
          onemoreshift_reg_reg[1] <= onemoreshift_reg_reg_next[1];
          onemoreshift_reg_reg[2] <= onemoreshift_reg_reg_next[2];
          onemoreshift_reg_reg[3] <= onemoreshift_reg_reg_next[3];
        end
      end
    end

  assign onemoreshift_p = onemoreshift_reg_reg[3];
  assign onemoreshift_reg_reg_next[0] = onemoreshift;
  assign onemoreshift_reg_reg_next[1] = onemoreshift_reg_reg[0];
  assign onemoreshift_reg_reg_next[2] = onemoreshift_reg_reg[1];
  assign onemoreshift_reg_reg_next[3] = onemoreshift_reg_reg[2];



  // Output Denormalization
  always @(dynamicshift_p, onemoreshift_p, xstage3) begin
    out_denorm_shiftarr[0] = xstage3 >>> 8'd48;
    out_denorm_shiftarr[1] = xstage3 >>> 8'd46;
    out_denorm_shiftarr[2] = xstage3 >>> 8'd44;
    out_denorm_shiftarr[3] = xstage3 >>> 8'd42;
    out_denorm_shiftarr[4] = xstage3 >>> 8'd40;
    out_denorm_shiftarr[5] = xstage3 >>> 8'd38;
    out_denorm_shiftarr[6] = xstage3 >>> 8'd36;
    out_denorm_shiftarr[7] = xstage3 >>> 8'd34;
    out_denorm_shiftarr[8] = xstage3 >>> 8'd32;
    out_denorm_shiftarr[9] = xstage3 >>> 8'd30;
    out_denorm_shiftarr[10] = xstage3 >>> 8'd28;
    out_denorm_shiftarr[11] = xstage3 >>> 8'd26;
    out_denorm_shiftarr[12] = xstage3 >>> 8'd24;
    out_denorm_shiftarr[13] = xstage3 >>> 8'd22;
    out_denorm_shiftarr[14] = xstage3 >>> 8'd20;
    out_denorm_shiftarr[15] = xstage3 >>> 8'd18;
    out_denorm_shiftarr[16] = xstage3 >>> 8'd16;
    out_denorm_shiftarr[17] = xstage3 >>> 8'd14;
    out_denorm_shiftarr[18] = xstage3 >>> 8'd12;
    out_denorm_shiftarr[19] = xstage3 >>> 8'd10;
    out_denorm_shiftarr[20] = xstage3 >>> 8'd8;
    out_denorm_shiftarr[21] = xstage3 >>> 8'd6;
    out_denorm_shiftarr[22] = xstage3 >>> 8'd4;
    out_denorm_shiftarr[23] = xstage3 >>> 8'd2;
    out_denorm_shiftarr[24] = xstage3;
    out_denorm_t_0_0 = {1'b0, dynamicshift_p};
    out_denorm_c = out_denorm_t_0_0 + 7'b0000001;
    if (onemoreshift_p == 1'b0) begin
      denormout = out_denorm_shiftarr[$signed({1'b0, out_denorm_c}) - 32'sd1] >>> 8'd1;
    end
    else begin
      denormout = out_denorm_shiftarr[$signed({1'b0, out_denorm_c}) - 32'sd1];
    end
  end



  // Zero input logic
  assign dout = (inzero_p == 1'b1 ? constInf :
              denormout);



endmodule  // HDL_Reciprocal_block1

